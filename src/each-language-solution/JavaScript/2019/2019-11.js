export const solution_201911 = {

    init () {
		
		console.log("==================== start 2019-11 =============================");

		this.task = Object.keys(solution_201911).filter(item => item !== 'init');
		
        this.task.forEach(item => console.log(this[item]()));
    },
    "2019-11-01" () {

		// 2019-11-01：百钱百鸡
		// 难度 ★
		// 我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。
		// 百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？
		
		const moneyChicken = money => {

			
		}
		
	},
	"2019-11-11" () {
		// 2019-11-11：马云双11到了，今天你们买了什么呢？省下了多少钱？
		// 由于今天是疯狂的购物节，既然是购物节，当然就少不了各种各样的优惠券，如何帮助程序选出最优的优惠券组合呢？
		// 1、优先使用大面额的红包，即优先使用张数最少的红包组合
		// 2、优先使用有限制的红包，即优先使用有限制红包张数占比最大的组合
		// 3、优先使用即将过期的红包，即优先使用平均有效期最短的组合
		// 4、选择红包面额之和最大的组合

		// 实际上通过数据库自带的查询排序功能可以做到1,2,3点，不过这里我们都通过程序来实现。
		

		
	},
	
    "2019-11-30" () {

        // 2019-11-31：sku算法  ———  多维属性状态判断
		// 难度 ★★★☆
        // 算法简化：假设只有3种状态：1、颜色：红蓝灰。2、尺码、大中小。型号、ABC。
        // 此时库存只有以下数据源：
		// [
		// 	{ "颜色": "红", "尺码": "大", "型号": "A", "skuId": "3158054" },
		// 	{ "颜色": "白", "尺码": "中", "型号": "B", "skuId": "3133859" },
		// 	{ "颜色": "蓝", "尺码": "小", "型号": "C", "skuId": "3516833" }
		// ]
		// 数据源不可选时将选项按钮置灰并禁用点击，请写出该SKU算法。
		return "2019-11-30";
	},
	"2019-11-31" () {

		//  2019-11-31：金额平均分配问题
        //  问题具体如下：
        //  某外卖商场某时刻接收到的订单有若干单，每单的金额不等，单子的金额越大，提成越高，但所需要做的事情也越多，
        //  故而需要根据单子的金额大小尽可能平均分配给对应的下属加盟连锁店，如何分配？

        //  假设某一时刻的订单列表详情为 [{amount: 156, id: 1}, {amount: 23.5, id: 2}, {amount: 19, id: 3}...]

        // const averageAmount = (amounts, horseMan) => {

        //     amounts.reduce((acc, cur) => acc.amounts + cur.amounts);
		// }
		return "2019-11-31"
	}
}